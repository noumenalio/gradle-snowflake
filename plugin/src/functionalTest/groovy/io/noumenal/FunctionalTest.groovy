/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package io.noumenal

import groovy.util.logging.Slf4j
import spock.lang.Shared
import spock.lang.Specification
import spock.lang.TempDir
import org.gradle.testkit.runner.GradleRunner

/**
 * A simple functional test for the 'io.noumenal.gradle.snowflake' plugin.
 */
@Slf4j
class FunctionalTest extends Specification {
   @Shared
   def result

   @Shared
   String taskName

   @TempDir
   @Shared
   private File projectDir

   @Shared
   File buildFile, settingsFile

   @Shared
   String account = System.getProperty("account"),
          user = System.getProperty("user"),
          password = System.getProperty("password"),
          publishUrl = System.getProperty("publishUrl")

   def setupSpec() {
      settingsFile = new File(projectDir, 'settings.gradle').write("""
                     |rootProject.name = 'unit-test'
                     |""".stripMargin())
      buildFile = new File(projectDir, 'build.gradle').write("""
                    |plugins {
                    |    id('io.noumenal.gradle.snowflake')
                    |}
                    |snowflake {
                    |  groupId = 'io.noumenal'
                    |  artifactId = 'test-gradle-snowflake'
                    |  role = 'devops'
                    |  database = 'devops'
                    |  schema = 'gradle'
                    |}
                    |version='0.1.0'
                    |""".stripMargin())
   }

   // helper method
   def executeSingleTask(String taskName, List args, Boolean logOutput = true) {
      List systemArgs = [
              "-Psnowflake.account=$account".toString(),
              "-Psnowflake.user=$user".toString(),
              "-Psnowflake.password=$password".toString()
      ]
      args.add(0, taskName)
      args.addAll(systemArgs)

      // Don't print the password
      //log.warn "runner arguments: ${args}"

      // execute the Gradle test build
      result = GradleRunner.create()
              .withProjectDir(projectDir)
              .withArguments(args)
              .withPluginClasspath()
              .forwardOutput()
              .build()

      // log the results
      if (logOutput) log.warn result.getOutput()
      return result
   }

   def "snowflakePublish with publishUrl option"() {
      given:
      taskName = 'snowflakePublish'

      when:
      result = executeSingleTask(taskName, ['-Psnowflake.publishUrl=s3://nio-maven-test', '-Si'])

      then:
      !result.tasks.collect { it.outcome }.contains('FAILURE')
   }

   def "snowflakePublish without publishUrl option"() {
      given:
      taskName = 'snowflakePublish'

      when:
      result = executeSingleTask(taskName, ['-Psnowflake.stage=upload', '-Si'])

      then:
      !result.tasks.collect { it.outcome }.contains('FAILURE')
   }

   def "snowflakePublish with custom JAR"() {
      given:
      taskName = 'snowflakePublish'

      when:
      result = executeSingleTask(taskName, ['--jar', 'build/libs/unit-test-0.1.0-all.jar','-Psnowflake.stage=upload', '-Si'])

      then:
      !result.tasks.collect { it.outcome }.contains('FAILURE')
   }
}
