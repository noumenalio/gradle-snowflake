/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package io.noumenal

import groovy.util.logging.Slf4j
import spock.lang.Shared
import spock.lang.Specification
import spock.lang.TempDir
import org.gradle.testkit.runner.GradleRunner

/**
 * A simple functional test for the 'io.noumenal.gradle.snowflake' plugin.
 */
@Slf4j
class FunctionalTest extends Specification {
   @Shared
   def result

   @Shared
   String taskName

   @TempDir
   @Shared
   private File projectDir

   @Shared
   File buildFile, settingsFile

   @Shared
   String account = System.getProperty("account"),
          user = System.getProperty("user"),
          password = System.getProperty("password"),
          database = System.getProperty("database"),
          role = System.getProperty("role"),
          warehouse = System.getProperty("warehouse"),
          schema = System.getProperty("schema"),
          stage = System.getProperty("stage"),
          publishUrl = System.getProperty("publishUrl")

   def setupSpec() {
      settingsFile = new File(projectDir, 'settings.gradle').write("")
      buildFile = new File(projectDir, 'build.gradle').write("""
                    |plugins {
                    |    id('io.noumenal.gradle.snowflake')
                    |}
                    |snowflake {
                    |  groupId = 'io.noumenal'
                    |  artifactId = 'test-gradle-snowflake'
                    |}
                    |""".stripMargin())
   }

   // helper method
   def executeSingleTask(String taskName, List args, Boolean logOutput = true) {
      List systemArgs = [
              "-Psnowflake.account=$account".toString(),
              "-Psnowflake.user=$user".toString(),
              "-Psnowflake.password=$password".toString(),
              "-Psnowflake.database=$database".toString(),
              "-Psnowflake.role=$role".toString(),
              "-Psnowflake.warehouse=$warehouse".toString(),
              "-Psnowflake.schema=$schema".toString(),
              "-Psnowflake.stage=$stage".toString(),
              "-Psnowflake.publishUrl=$publishUrl".toString()
      ]
      args.add(0, taskName)
      args.addAll(systemArgs)

      // Don't print the password
      log.warn "runner arguments: ${args.collect().removeAll { String item -> item.contains("password") }.collect()}"

      // execute the Gradle test build
      result = GradleRunner.create()
              .withProjectDir(projectDir)
              .withArguments(args)
              .withPluginClasspath()
              .forwardOutput()
              .build()

      // log the results
      if (logOutput) log.warn result.getOutput()
      return result
   }

   def "snowflakePublish task"() {
      given:
      taskName = 'snowflakePublish'
//      settingsFile << ""
//      buildFile << """
//                    |plugins {
//                    |    id('io.noumenal.gradle.snowflake')
//                    |}
//                    |""".stripMargin()

      when:
      result = executeSingleTask(taskName, ['-Si'])

      then:
      !result.tasks.collect { it.outcome }.contains('FAILURE')
   }
}
