package io.github.stewartbryson

import groovy.util.logging.Slf4j
import org.gradle.api.tasks.CacheableTask
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.Optional
import org.gradle.api.tasks.options.Option

/**
 * A superclass for creating Gradle tasks that use ephemeral Snowflake clones.
 */
@Slf4j
@CacheableTask
abstract class SnowflakeEphemeralTask extends SnowflakeTask {

    /**
     * When enabled, run using an ephemeral Snowflake database cloned from {@link #database}. Useful with CI/CD testing workflows.
     */
    @Optional
    @Input
    @Option(option = "use-ephemeral", description = "When enabled, run using an ephemeral Snowflake database clone.")
    Boolean useEphemeral = extension.useEphemeral

    /**
     * When enabled, don't drop the ephemeral Snowflake database cloned from {@link #database}.
     */
    @Optional
    @Input
    @Option(option = "keep-ephemeral", description = "When enabled, don't drop the ephemeral Snowflake database clone.")
    Boolean keepEphemeral = extension.useEphemeral

    /**
     * Optional: specify the ephemeral database name instead of relying on an autogenerated value. The plugin detects CI/CD environments and uses things like PR numbers, branch names, etc. when available.
     */
    @Optional
    @Input
    @Option(option = "ephemeral-name", description = "Optional: specify the ephemeral database name instead of relying on an autogenerated value.")
    String ephemeralName = extension.ephemeralName

    /**
     * Create an ephemeral Snowflake clone.
     */
    def createClone() {
        if (useEphemeral) {
            // record connection attributes
            try {
                snowflake.ephemeral = ephemeralName
                snowflake.session.jdbcConnection().createStatement().execute("create database if not exists ${snowflake.ephemeral} clone ${snowflake.connectionDatabase}")
                snowflake.session.jdbcConnection().createStatement().execute("grant ownership on database ${snowflake.ephemeral} to ${snowflake.connectionRole}")
                snowflake.setEphemeralContext()
            } catch (Exception e) {
                throw new Exception("Cloning ephemeral clone failed.", e)
            }
            log.warn "Ephemeral clone ${snowflake.ephemeral} created."
        }
    }

    /**
     * Drop the ephemeral Snowflake clone.
     */
    def dropClone() {
        if (useEphemeral && !keepEphemeral) {
            // drop the ephemeral database
            try {
                snowflake.ephemeral = ephemeralName
                snowflake.session.jdbcConnection().createStatement().execute("drop database if exists ${ephemeralName}")
                snowflake.setOriginalContext()
            } catch (Exception e) {
                throw new Exception("Dropping ephemeral clone failed.", e)
            }
            log.warn "Ephemeral clone $snowflake.ephemeral dropped."
        }
    }
}
